openapi: 3.0.3
info:
  title: "Payment API"
  description: >
    API для работы с платежами
  version: "0.1.0"
servers:
  - url: "{protocol}://{server}:{port}{basePath}"
    variables:
      protocol:
        enum:
          - "http"
          - "https"
        default: "https"
      port:
        enum:
          - "8080"
          - "443"
        default: "443"
      server:
        enum:
          - "localhost"
          - "finesspay.ru"
        default: "finesspay.ru"
      basePath:
        default: "/api/payment"
tags:
  - name: accounts
    description: Управление счетами
  - name: qrcodes
    description: Управление QR-кодами
  - name: payments
    description: Работа с платежами
  - name: beacons
    description: Управление bluetooth маяками и их привязка к платежным данным
paths:
  /v1/accounts:
    post:
      tags:
        - accounts
      summary: "Создание счета"
      description: "Создание нового счета для входящих платежей"
      operationId: "createAccount"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "Параметры создания счета"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountCreationParameters"
      responses:
        '201':
          description: "Счет успешно создан"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        '400':
          $ref: "#/components/responses/BadRequest"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/accounts/{id}:
    get:
      tags:
        - accounts
      summary: "Получение счета"
      operationId: "getAccount"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Идентификатор счета"
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        '200':
          description: "Счет успешно получен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/qrcodes:
    post:
      tags:
        - qrcodes
      summary: "Создание QR-кода"
      description: "Создание нового QR-кода для входящих платежей"
      operationId: "createQRCode"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "Параметры создания QR-кода"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QRCodeCreationParameters"
      responses:
        '201':
          description: "QR-код успешно создан"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QRCode"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/qrcodes/{id}:
    get:
      tags:
        - qrcodes
      summary: "Получение QR-кода"
      operationId: "getQRCode"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Идентификатор QR-кода"
          schema:
            $ref: "#/components/schemas/QRCodeId"
      responses:
        '200':
          description: "QR-код успешно получен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QRCode"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/payments:init:
    post:
      tags:
        - payments
      summary: "Инициализация нового платежа"
      description: "Инициализация нового платежа"
      operationId: "createPaymentInitializationTask"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "Параметры создания платежа"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentCreationParameters"
      responses:
        '202':
          description: "Запрос на инициализацию платежа успешно принят"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInitializationTask"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/payments/initializations/{id}:
    get:
      tags:
        - payments
      summary: "Получение статуса инициализации платежа"
      operationId: "getPaymentInitializationTask"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Идентификатор задачи инициализации платежа"
          schema:
            $ref: "#/components/schemas/PaymentTaskId"
      responses:
        '200':
          description: "Статус инициализации платежа успешно получен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInitializationTask"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/beacons:
    post:
      tags:
        - beacons
      summary: "Создание нового маяка"
      description: "Создание маяка с автоматически сгенерированными major/minor параметрами и привязка к платежным данным пользователя"
      operationId: "createBeacon"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "Платежные данные для привязки к маяку"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeaconCreationRequest"
      responses:
        '201':
          description: "Маяк успешно создан"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeaconInfo"
        '400':
          $ref: "#/components/responses/BadRequest"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - beacons
      summary: "Деактивация маяка"
      description: "Деактивация маяка по major и minor параметрам"
      operationId: "deactivateBeacon"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: major
          in: query
          required: true
          description: "Major параметр маяка"
          schema:
            $ref: "#/components/schemas/BeaconMajor"
        - name: minor
          in: query
          required: true
          description: "Minor параметр маяка"
          schema:
            $ref: "#/components/schemas/BeaconMinor"
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: "#/components/responses/NotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
    get:
      tags:
        - beacons
      summary: "Поиск платежной информации по параметрам маяка"
      description: "Получение платежной информации по major и minor параметрам маяка"
      operationId: "findBeaconPaymentInfo"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: major
          in: query
          required: true
          description: "Major параметр маяка"
          schema:
            $ref: "#/components/schemas/BeaconMajor"
        - name: minor
          in: query
          required: true
          description: "Minor параметр маяка"
          schema:
            $ref: "#/components/schemas/BeaconMinor"
      responses:
        '200':
          description: "Платежная информация успешно найдена"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeaconInfo"
        '404':
          $ref: "#/components/responses/NotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
  /v1/beacons/configuration:
    get:
      tags:
        - beacons
      summary: "Получение конфигурации для приемника"
      description: "Получение UUID для поиска маяков через iBeacon протокол"
      operationId: "getBeaconConfiguration"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: "Конфигурация успешно получена"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeaconConfiguration"
        '400':
          $ref: "#/components/responses/BadRequest"
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '503':
          $ref: "#/components/responses/ServiceUnavailable"
components:
  schemas:
    AccountCreationParameters:
      type: object
      properties:
        ownerName:
          $ref: "#/components/schemas/OwnerName"
        inn:
          $ref: "#/components/schemas/INN"
        bik:
          $ref: "#/components/schemas/BIK"
        accountNumber:
          $ref: "#/components/schemas/AccountNumber"
      required:
        - ownerName
        - inn
        - bik
        - accountNumber
    Account:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/AccountId"
        ownerName:
          $ref: "#/components/schemas/OwnerName"
        inn:
          $ref: "#/components/schemas/INN"
        bik:
          $ref: "#/components/schemas/BIK"
        accountNumber:
          $ref: "#/components/schemas/AccountNumber"
      required:
        - id
        - ownerName
        - inn
        - bik
        - accountNumber
    AccountId:
      type: string
      format: uuid
      description: "Идентификатор счета"
      example: "550e8400-e29b-41d4-a716-446655440000"
    OwnerName:
      type: string
      description: "Имя владельца счета"
      example: "Иванов Иван Иванович"
    INN:
      type: string
      description: "ИНН владельца счета"
      pattern: "^(\\d{12}|\\d{10}|0{1})$"
      example: "123456789012"
    BIK:
      type: string
      description: "БИК банка владельца счета"
      pattern: "^\\d{9}$"
      example: "123456789"
    AccountNumber:
      type: string
      description: "Номер счета"
      pattern: "^(\\d{20}|\\d{22})$"
      example: "12345678901234567890"
    QRCodeCreationParameters:
      type: object
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        amount:
          $ref: "#/components/schemas/QRCodeAmount"
      required:
        - accountId
        - amount
    QRCodeAmount:
      type: number
      format: float
      description: "Сумма платежа. Должна быть положительным числом с двумя знаками после запятой"
      example: 100.50
      maximum: 99999999.99
    QRCode:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/QRCodeId"
        accountId:
          $ref: "#/components/schemas/AccountId"
        amount:
          $ref: "#/components/schemas/QRCodeAmount"
      required:
        - id
        - accountId
        - amount
    QRCodeId:
      type: string
      description: "Идентификатор QR-кода"
      example: "Lqj8a0"
      minLength: 6
    AssociationId:
      type: object
      description: Айди ассоциации счета (например блютуз маяк или QrCode)
      discriminator:
        propertyName: type
        mapping:
          BEACON: "#/components/schemas/BeaconAssociationId"
          QRCODE: "#/components/schemas/QrCodeAssociationId"
      properties:
        type:
          type: string
          description: Тип ассоциации
          enum:
            - "BEACON"
            - "QRCODE"
          example: "QRCODE"
      required:
        - type
    BeaconAssociationId:
      allOf:
        - $ref: "#/components/schemas/AssociationId"
        - type: object
          description: Ассоциация счета с маяком
          properties:
            beaconId:
              $ref: "#/components/schemas/BeaconId"
          required:
            - beaconId
          example:
            type: BEACON
            beaconId: 550e8400-e29b-41d4-a716-446655440000
    QrCodeAssociationId:
      allOf:
        - $ref: "#/components/schemas/AssociationId"
        - type: object
          description: Ассоциация счета с QR-кодом
          properties:
            qrCodeId:
              $ref: "#/components/schemas/QRCodeId"
          required:
            - qrCodeId
          example:
            type: QRCODE
            qrCodeId: 9EoEM3
    PaymentCreationParameters:
      type: object
      properties:
        associationId:
          $ref: "#/components/schemas/AssociationId"
      required:
        - associationId
    PaymentInitializationTask:
      type: object
      description: >-
        Инициализация асинхронной платежной задачи. Идентификатор платежа в системе 
        интернет-эквайринга т-банка возвращается при статусе INITIALIZED
      properties:
        id:
          $ref: "#/components/schemas/PaymentTaskId"
        status:
          type: string
          enum:
            - "INITIALIZED"
            - "IN_PROGRESS"
            - "FAILED"
        acquiringPaymentUrl:
          $ref: "#/components/schemas/AcquiringPaymentUrl"
        createdAt:
          type: string
          format: date-time
          description: "Дата и время создания платежа"
          example: "2015-11-03T10:15:57.000Z"
      required:
        - id
        - status
        - createdAt
    PaymentTaskId:
      type: string
      description: "Идентификатор задачи инициализации платежа"
      format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"
    AcquiringPaymentUrl:
      type: string
      description: "Ссылка на платежную форму"
      format: uri
      example: "https://securepay.tinkoff.ru/new/fU1ppgqa"
    BeaconCreationRequest:
      type: object
      properties:
        amount:
          $ref: "#/components/schemas/QRCodeAmount"
        account:
          $ref: "#/components/schemas/AccountCreationParameters"
      required:
        - account
        - amount
    BeaconInfo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BeaconId"
        major:
          $ref: "#/components/schemas/BeaconMajor"
        minor:
          $ref: "#/components/schemas/BeaconMinor"
        bluetoothId:
          $ref: "#/components/schemas/BeaconBluetoothId"
        account:
          $ref: "#/components/schemas/Account"
      required:
        - id
        - major
        - minor
        - bluetoothId
        - account
    BeaconId:
      type: string
      description: "Идентификатор маяка"
      format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"
    BeaconBluetoothId:
      type: string
      description: "Конфигурация для поиска маяков"
      format: uuid
      example: "39ED98FF-2900-441A-802F-9C398FC199D2"
    BeaconMajor:
      type: integer
      format: uint16
      minimum: 0
      maximum: 65535
      description: "Major параметр маяка"
      example: 1
    BeaconMinor:
      type: integer
      format: uint16
      minimum: 0
      maximum: 65535
      description: "Minor параметр маяка"
      example: 1
    BeaconConfiguration:
      type: object
      description: "Конфигурация для поиска маяков"
      properties:
        bluetoothId:
          $ref: "#/components/schemas/BeaconBluetoothId"
      required:
        - bluetoothId
  responses:
    NotFound:
      description: "Ресурс не найден"
    BadRequest:
      description: "Неверный формат данных запроса"
    Unauthorized:
      description: "Аутентификация не удалась - сессия не найдена"
    InternalServerError:
      description: "Внутренняя ошибка сервера - запрос не может быть обработан"
    ServiceUnavailable:
      description: "Сервис временно недоступен - попробуйте позже"
    TooManyRequests:
      description: "Слишком много запросов - превышен лимит"
    NoContent:
      description: "Запрос успешно обработан, но нет данных для возврата"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT